{"ast":null,"code":"import { EditServerComponent } from '../edit-server/edit-server.component';\nimport { CreateServerComponent } from '../create-server/create-server.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../server.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/common\";\nfunction ServerComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\")(10, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ServerComponent_tr_17_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const server_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.openEditDialog(server_r1));\n    });\n    i0.ɵɵtext(11, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function ServerComponent_tr_17_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const server_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.deleteServer(server_r1));\n    });\n    i0.ɵɵtext(13, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const server_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(server_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(server_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(server_r1.language);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(server_r1.framework);\n  }\n}\nexport let ServerComponent = /*#__PURE__*/(() => {\n  var _class;\n  class ServerComponent {\n    constructor(serverService, dialog) {\n      this.serverService = serverService;\n      this.dialog = dialog;\n      this.servers = [];\n    }\n    ngOnInit() {\n      this.fetchServers();\n    }\n    fetchServers() {\n      this.serverService.getServers().subscribe(data => {\n        console.log(data);\n        this.servers = data;\n      });\n    }\n    openEditDialog(server) {\n      const dialogRef = this.dialog.open(EditServerComponent, {\n        width: '400px',\n        data: {\n          server\n        },\n        panelClass: 'center-dialog' // Add your custom CSS class if needed\n      });\n      // Subscribe to the dialog's afterClosed event to receive data when the dialog is closed\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          // Update the server data in your servers array here\n          // You can use a service or other logic to update the data\n          const index = this.servers.findIndex(s => s.id === result.id);\n          if (index !== -1) {\n            this.servers[index] = result;\n          }\n        }\n      });\n    }\n    deleteServer(server) {\n      const serverId = parseInt(server.id, 10); // Parse server.id as a number\n      if (confirm('Are you sure you want to delete the server?')) {\n        this.serverService.deleteServer(serverId).subscribe(() => {\n          // Fetch the updated server list after deletion\n          this.fetchServers();\n        });\n      }\n    }\n    openCreateDialog() {\n      const dialogRef = this.dialog.open(CreateServerComponent, {\n        width: '400px',\n        data: {},\n        panelClass: 'center-dialog' // Add your custom CSS class if needed\n      });\n      // Subscribe to the dialog's afterClosed event to refresh the server list\n      dialogRef.afterClosed().subscribe(() => {\n        this.fetchServers();\n      });\n    }\n  }\n  _class = ServerComponent;\n  _class.ɵfac = function ServerComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.ServerService), i0.ɵɵdirectiveInject(i2.MatDialog));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-server\"]],\n    decls: 18,\n    vars: 1,\n    consts: [[1, \"container\", \"mt-4\"], [1, \"text-center\"], [1, \"table\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-warning\", \"mx-1\", 3, \"click\"], [1, \"btn\", \"btn-danger\", \"mx-1\", 3, \"click\"]],\n    template: function ServerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Server List\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"table\", 2)(4, \"thead\")(5, \"tr\")(6, \"th\", 3);\n        i0.ɵɵtext(7, \"ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"th\", 3);\n        i0.ɵɵtext(9, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\", 3);\n        i0.ɵɵtext(11, \"Language\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"th\", 3);\n        i0.ɵɵtext(13, \"Framework\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"th\", 3);\n        i0.ɵɵtext(15, \"Modify\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"tbody\");\n        i0.ɵɵtemplate(17, ServerComponent_tr_17_Template, 14, 4, \"tr\", 4);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.servers);\n      }\n    },\n    dependencies: [i3.NgForOf]\n  });\n  return ServerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}