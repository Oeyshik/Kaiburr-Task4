{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AppComponent = class AppComponent {\n  constructor(serverService) {\n    this.serverService = serverService;\n    this.title = 'kaiburr-app';\n    this.servers = []; // Define the 'servers' property as an empty array\n  }\n\n  ngOnInit() {\n    // Fetch server data when the component is initialized\n    this.loadServerData();\n  }\n  loadServerData() {\n    // Call the server service to fetch server data and populate the 'servers' array\n    this.serverService.getAllServers().subscribe(data => {\n      this.servers = data;\n    }, error => {\n      console.error('Error loading server data:', error);\n      // Handle the error, e.g., redirect to an error page or show an error message.\n    });\n  }\n};\n\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","AppComponent","constructor","serverService","title","servers","ngOnInit","loadServerData","getAllServers","subscribe","data","error","console","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\VIT\\Kaiburr\\task4\\kaiburr-app\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ServerService } from './server.service'; // Import the service that fetches server data\nimport { Server } from './server.model'; // Import the Server model if you have one\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'kaiburr-app';\n  servers: Server[] = []; // Define the 'servers' property as an empty array\n\n  constructor(private serverService: ServerService) {}\n\n  ngOnInit() {\n    // Fetch server data when the component is initialized\n    this.loadServerData();\n  }\n\n  loadServerData() {\n    // Call the server service to fetch server data and populate the 'servers' array\n    this.serverService.getAllServers().subscribe(\n      (data: Server[]) => {\n        this.servers = data;\n      },\n      error => {\n        console.error('Error loading server data:', error);\n        // Handle the error, e.g., redirect to an error page or show an error message.\n      }\n    );\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAIvBC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IAHjC,KAAAC,KAAK,GAAG,aAAa;IACrB,KAAAC,OAAO,GAAa,EAAE,CAAC,CAAC;EAE2B;;EAEnDC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,cAAc,EAAE;EACvB;EAEAA,cAAcA,CAAA;IACZ;IACA,IAAI,CAACJ,aAAa,CAACK,aAAa,EAAE,CAACC,SAAS,CACzCC,IAAc,IAAI;MACjB,IAAI,CAACL,OAAO,GAAGK,IAAI;IACrB,CAAC,EACDC,KAAK,IAAG;MACNC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC,CACF;EACH;CACD;;AAvBYV,YAAY,GAAAY,UAAA,EALxBb,SAAS,CAAC;EACTc,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACWf,YAAY,CAuBxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}