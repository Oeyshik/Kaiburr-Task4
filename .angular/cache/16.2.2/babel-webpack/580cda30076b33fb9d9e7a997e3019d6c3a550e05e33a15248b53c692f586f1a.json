{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServerService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:8080/api/servers\";\n  }\n  // To get all servers in Server List\n  getServers() {\n    return this.http.get(`${this.baseUrl}`);\n  }\n  // To create a new server\n  createServer(server) {\n    return this.http.post(this.baseUrl, server);\n  }\n}\n_class = ServerService;\n_class.ɵfac = function ServerService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["ServerService","constructor","http","baseUrl","getServers","get","createServer","server","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\VIT\\Kaiburr\\task4\\kaiburr-app\\src\\app\\server.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Server } from './server';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n\n  private baseUrl = \"http://localhost:8080/api/servers\"\n\n  constructor(private http: HttpClient) { }\n\n  // To get all servers in Server List\n  getServers(): Observable<Server[]>{\n    return this.http.get<Server[]>(`${this.baseUrl}`)\n  }\n\n  // To create a new server\n  createServer(server: Server): Observable<Server> {\n    return this.http.post<Server>(this.baseUrl, server);\n  }\n}\n"],"mappings":";;;AAQA,OAAM,MAAOA,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,mCAAmC;EAEb;EAExC;EACAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,EAAE,CAAC;EACnD;EAEA;EACAG,YAAYA,CAACC,MAAc;IACzB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAS,IAAI,CAACL,OAAO,EAAEI,MAAM,CAAC;EACrD;;SAdWP,aAAa;;mBAAbA,MAAa,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAbZ,MAAa;EAAAa,OAAA,EAAbb,MAAa,CAAAc,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}